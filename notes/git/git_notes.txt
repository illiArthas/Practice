** Git **
	"Git is a software that allows you to keep track of changes made to a project 
	over time. Git works by recording the changes you make to a project, storing 
	those changes, then allowing you to reference them as needed."


	** Important **	**	**	**	**
	If you ever get stuck on git log, type:         :wq		or    press q
	they exit you out of that.
	**	**	**	**	**	**


	A git project can be thought of as having three parts:

		1. A WORKING Directory where you'll be doing all the work: creating, editing, deleting
		
		2. A STAGING Directory where you'll list changes you make to the working directory

		3. A REPOSITORY where Git permanently stores those changes as different verions of the project.

	
	* Git commands

		* git init - creates a new Git repository

		* git status - inspects the contents of the working directory and staging area

		* git add - adds files from the working directory to the staging area

		* git diff - shows the difference between the working directory and the staging area
	
		* git commit - permanently stores file changes from the staging area in the repository

		* git log - shows a list of all previous commits
		
		* git show HEAD - The most recent commit is called the HEAD commit.

		* git checkout HEAD - Will restore the file in your working directory to look exactly
		  as it did when you last made a commit.

		* git reset HEAD - This will remove a file from the staging area.

		* git reset --hard SHA - enables you to specifically reset back to a specific commit you previously
		  did, this command works by using the first 7 characters of the SHA commit. Check git log to find out.

		* git branch - checks all the branches. The '*' signs shows which branch you're on.

		* git branch branchName - creates a new branch.

		* git checkout branchName - this allows you to switch to a branch.

		* git merge branchName - allows you to merge a branch to the master branch

		* git branch -d branchName - allows you to delete a branch.

		* git clone remote_location clone_name - allows you to clone the repository, remote location can be a web address or a filepath, clone_name is what you'll call it in your directory.

+
		* git remote -v - allows you to see the original remote address of your cloned version.

		* git rm - allows you to remove a file or a folder.

		* git fetch - allows you to bring the changes made down to your local copy.

	* Git queries
		
		* To initialize, type:
			git init

		* To check git status, type;
			git status

		* To start tracking/adding a file into the staging area, type:
			git add filename	// filename i.e. pickMe.txt

		* To git add multiple files:
			git add fileName.txt fileName2.txt 

		* If a file is tracked and you want to view changes, type:
			git diff filename	// filename i.e. pickMe.txt
		
		* TO commit, type
			git commit -m "This is a message"

		* To see commit details, type:
			git log
		
		* To check git HEAD, type:
			git show HEAD

		* To restore current directory to the latest commit, type:
			git checkout HEAD myFile.txt

		* To remove a file from the stagin area:
			git reset HEAD myFile.txt
		
		* To reset git specifically, type git reset and the first 7 letters of the SHA:
			git reset --hard 5d69206

		* To check all branches and which branch you're on:
			git branch
	
		* To create a new branch:
			git branch branchName

		* To switch to a different branch:
			git checkout branchName

		* To merge a branch to the master branch:
			git merge branchName

		* To delete a branch:
			git branch -d branchName

		* To clone a repository:
			git clone remote_location clone_name

		* To check original version of your cloned version:
			git remote -v

		* To remove a file or a folder:
			git rm file1.txt

		* To update changes made by the repository down to your local repository:
			git fetch

		* To push a branch
			git push -u origin branchName


** Git branching **

	Up to this point, you've worked in a single Git branch called master. 
	Git allows us to create branches to experiment with versions of a project. 
	Imagine you want to create version of a story with a happy ending.
	You can create a new branch and make the happy ending changes to that branch only. 
	It will have no effect on the master branch until you're ready to merge the happy ending to 
	the master branch.

	syntax:
		git branch

	The * (asterisk) sign is showing you what branch you're on.


	The master and fencing branches are identical: they share the same exact commit history. 
	You can switch to the new branch. Once you switch branch, be now able to make commits 
	on the branch that have no impact on master.

	Syntax to switch branches:
		git checkout branchName

	What if you wanted include all the changes made to the fencing branch on the master branch? 
	We can easily accomplish this by merging the branch into master with:
		git merge branchName

	for example, if you wanted to merge skills branch to master, type:
		git merge skills
	YOU ALSO NEED TO BE IN THE MASTER BRANCH TO MERGE BRANCHES

	
	What would happen if you made a commit on master before you merged the two branches? 
	Furthermore, what if the commit you made on master altered the same exact text you worked on 
	in fencing? When you switch back to master and ask Git to merge the two branches,
	Git doesn't know which changes you want to keep. This is called a merge conflict.
	
	If this happens git will ask you which version to keep.

	 	*	<<<<<< HEAD (master)  - this means the master version
		*       >>>>>>	- this means the other branch's version   
	
	Once you've decided which version to keep, make sure to delete the content from that version,
	and all of of Git's special markings i.e. HEAD, fencing, >>>>>, <<<< 
	if Git's markings remain, the conflict remains.


	In Git, branches are usually a means to an end. You create them to work on a new project feature,
	but the end goal is to merge that feature into the master branch. 
	After the branch has been integrated into master, it has served its purpose and can be deleted.
	
	

** Git fetch **

	After you cloned science-quizzes, you had to run off to teach a class. 
	Now that you're back at your computer, there's a problem: what if, while you were teaching,
	Sally changed the science-quizzes Git project in some way. If so, your clone will no longer 
	be up-to-date.

	An easy way to see if changes have been made to the remote and bring the changes down 
	to your local copy is with:   git fetch


















