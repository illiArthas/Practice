If you get confused about everything, you can find a proper documentation for all these from:
	http://docs.oracle.com/javase/tutorial/java/concepts/index.html

** Inheritance **
	Object-oriented programming allows classes to inherit commonly used state and behavior from other classes. 
	In this example, Dog now becomes the superclass of goldenRetriever, Pug, and pitBull. 
	In the Java programming language, each class is allowed to have one direct superclass, and each superclass
	has the potential for an unlimited number of subclasses:

	The syntax for creating a subclass is simple. At the beginning of your class declaration, use the
	'extends' keyword, followed by the name of the class to inherit from, for example:

		class goldenRetriever extends Dog {
			// Now the goldenRetriever class inherits from the Dog class
			// This means what ever methods, properties the Dog class has
			// the goldenRetriver class also has it too.
		}

** Interface **

	In its most common form, an interface is a group of related methods with empty bodies. 
	A bicycle's behavior, if specified as an interface, might appear as follows:
		public interface Bicycle {
			void changeCadence(int newValue);
			void changeGear(int newValue);
			void speedUp(int increment);
			void applyBrakes(int decrement);
		}

	It is a common practice to add the work 'ACME' into your interface to help other programmers know what type of class it is
	To implement this interface you'd use the 'implements' keyword in the class declaration:
		public class ACMEBicycle implements Bicycle {
			int cadence = 0;
			int speed = 0;
			int gear = 1;
				// The compiler will now require that methods
   				// changeCadence, changeGear, speedUp, and applyBrakes
  			 	// all be implemented. Compilation will fail if those
   				// methods are missing from this class.
			void changeCadence(int newValue){
				cadence = newValue;
			}
			void changeGear(int newValue){
				gear = newValue;
			}
			void speedUp(int addSpeed){
				speed += addSpeed;
			}
			void applyBrakes(int reduceSpeed){
				speed -= reduceSpeed;
			}
		}

		Implementing an interface allows a class to become more formal about the behavior it promises to provide. 
		Interfaces form a contract between the class and the outside world, and this contract is enforced at 
		build time by the compiler. If your class claims to implement an interface, all methods defined by that 
		interface must appear in its source code before the class will successfully compile.

